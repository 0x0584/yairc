* Yet Another Internet Relay Chat

* Networking API

All networking API function are considered equivalent to system calls such as =read= or =write=, they lay in man(2).

#+BEGIN_SRC c
  #define INADDR_ANY              (u_int32_t)0x00000000

  in_addr_t inet_addr(const char *cp);

  uint32_t htonl(uint32_t hostlong);
  uint16_t htons(uint16_t hostshort);
  uint32_t ntohl(uint32_t netlong);
  uint16_t ntohs(uint16_t netshort);

  int socket(int domain, int type, int protocol);
  int bind(int sock_fd, struct sockaddr *addr, socklen_t addr_size);

  int listen(int socket, int backlog);
  int connect(int socket, const struct sockaddr *address, socklen_t address_len);

  ssize_t send(int socket, const void *buffer, size_t length, int flags);
  ssize_t recv(int socket, void *buffer, size_t length, int flags);
#+END_SRC

** =socket()= and =struct sockaddr=

When =socket()= is created, which is just allocating a file resource in the OS, by specifiying the protocol family and type, and which mode of transmission i.e. UDP or TCP. It requires additional information on the address itself, namelty the host and the port, which both should be in machine encoding i.e. same behaviour as =hton()=.

 - Except that =inet_addr()= returns the address in machine encoding already

#+BEGIN_QUOTE
  As a legacy, there are two types =struct sockaddr= and =struct sockaddr_in=, they represent the same information, but the later is more convenient to work with.
#+END_QUOTE

At last, both the socket and the address are entangeled using =bind()=

** =listen()=, =accept()= and =poll()= multiple clients

When getting a socket for the server, we may =listen()= for incoming connections. Each new connection is a new =socket()= associated with a client, that is created after calling =accept()=.

However, =listen()= runs asynchronously, =accept()= should be called for as many clients that ahve sent the request. Yet, it blocks e.g. same as waiting for IO. Thus if no new request has been sent, =accept()= will await and blocks the process.

This can be resolved using multitasking, by telling the OS to not block using =fcntl()= to alter the flags of the socket file. And then use =poll()= to fetch only the ones that are ready to be fetched. By setting event =POLLIN= on creation, the OS would set flags in return when it is unblocking. Now instead of blocking the process, an =EWOULDBLOCK= (or =EAGAIN=) would be raised, resolving the block.

** =recv()= data

For each client that has sent, we may =recv()= some data to be put in a buffer, the length of the data is returned, and a closed connection would return 0. However, the total length of the incoming data may overfit the size of the buffer, thus it may require multiple reads until it blocks by raising =errno=.

** Sending Data

* Internet Relay Chat ([[https://www.rfc-editor.org/rfc/rfc1459][RFC1459]])

** Server

** Client

** Commands

* References

 - [[https://www.rfc-editor.org/rfc/rfc1459][IRC Standard]]
 - [[https://unicorn-utterances.com/posts/joining-freenode-irc][Using Freenode IRC Server]]
 - [[https://beej.us/guide/bgnet/html][Beej's Guide to Network Programming]]
 - [[http://dwise1.net/pgm/sockets/][DWise1's Sockets Programming Pages]]
 - [[http://www.kegel.com/c10k.html][Handling multiple users]]

** Stackoverflow

 - [[https://stackoverflow.com/questions/36985793/blocking-recv-vs-fcntl][disable =recv= blocking]]
 - [[https://stackoverflow.com/questions/1543466/how-do-i-change-a-tcp-socket-to-be-non-blocking][How to change a tcp socket to be non blocking]]
